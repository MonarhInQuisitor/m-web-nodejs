"use strict";
// Напишіть функцію, яка приймає:
// 1) Деякі дані умовного типу Т, але не з усіма полями
// 2) функцію-доповнювач, яка приймає такі штуки як із п.1,
//     а повертає повноцінний об'єкт типу Т
// ... як ви зрозуміли, саму функцію писати не треба:)
// нас цікавить лише її сигнатура.
function a(date, fn) { return fn(date); }
function b(date) {
    if (!date.age)
        date.age = 32;
    if (!date.name)
        date.name = "Ivan";
    if (!date.id)
        date.id = "0";
    return date;
}
const user = a({ name: "Olga" }, b);
console.log(user); // { name: 'Olga', age: 25 }
// Більш складний варіант:
// Напишіть функцію, яка приймає:
// 1) Деякі дані умовного типу Т (у якого поле id: string),
//    але можливо без поля id
// 2) функцію-доповнювач, яка приймає такі штуки як із п.1,
//     а повертає повноцінний об'єкт типу Т
// ... як ви зрозуміли, саму функцію писати не треба:)
// нас цікавить лише її сигнатура.
// Останнє завдання:
// Напишіть сигнатуру функції, що приймає
// - якийсь клас
// - кількість
// ...а повертає масив екземплярів цього класу
class Rectangle {
}
class Circle {
}
// Зробіть норм сигнатуру тут.
// НІ, Rectangle | Circle це не варіант, треба зробити універсальну функцію
function наштампувати(SOMECLASS, count) {
    let a = [];
    for (let i = 0; i < count; i++)
        a.push(new SOMECLASS());
    return a;
}
let a1 = наштампувати(Rectangle, 10);
let b1 = наштампувати(Circle, 20);
console.log(a1);
console.log(typeof Rectangle);
